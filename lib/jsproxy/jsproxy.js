//JSProxy用のJavaScript関数を登録します。
/**
 * Register JavaScript functions for JSProxy.
 *
 * @param {Object} importObject JavaScript object to be accessible from WASM
 */
export async function addJSProxyImport(importObject) {
  globalThis._JSProxySetReferenceData = (obj) => { globalThis['__JSProxy_Reference__'] = obj; };

  importObject['JSProxy'] = {
    _setValueProxy: (value) => {
      globalThis['__JSProxy_Value__'] = value;
    },

    _getReferenceProxy: () => {
      return globalThis['__JSProxy_Reference__'];
    }
  };

  return importObject;
}

//JProxy用のJavaScript関数を登録してDart用のWASMインスタンスを作成します。
/**
 * Register JavaScript functions for JProxy and create a WASM instance for Dart.
 *
 * @param {UInt8Array} wasmModule WASM module
 * @param {Object} dart2wasm Variables imported from .mjs files generated by dart2wasm
 * @param {Object} importObject JavaScript object to be accessible from WASM
 * @param {Boolean} callMain Whether to call the main function immediately after instantiation
 */
export async function JSProxyInstantiate(wasmModule, dart2wasm, importObject = {}, callMain = true) {
  if (typeof importObject === 'undefined' || importObject === null) importObject = {};

  await addJSProxyImport(importObject);

  let instance = await dart2wasm.instantiate(wasmModule, importObject);
  if (callMain) await dart2wasm.invoke(instance);
  return instance;
}

export function dartifyProxy(instance, object) {
  return instance.exports.dartifyProxy(object);
}